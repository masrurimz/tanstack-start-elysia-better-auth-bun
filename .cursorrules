# Cursor Rules

## Core Principles

- Write clean, readable code with feature-based organization
- Keep files small and focused (<200 lines)
- Use clear, consistent naming and prioritize modularity
- Always use object as function parameter
- Always use arrow functions for class methods

## Code Style

### File Naming & Structure

- Use kebab-case for all file and directory names
- Organize directories by feature with underscore prefix for feature-specific folders:
  - `features/feature/_components/`, `features/feature/_controllers/`, etc.

### TypeScript & React

- Use TypeScript with proper types; prefer interfaces over types for object shapes
- Implement functional components with TypeScript interfaces for props
- Use functional and declarative programming patterns

### Hook Design

- Create single-responsibility hooks that return one state or action
- Avoid hooks that return multiple states or actions to prevent unnecessary re-renders
- Use composition to combine smaller hooks where needed

### Component Design

- Use compound component design pattern for complex components
- Follow shadcn/ui patterns for component composition
- Create small, reusable components that can be composed together
- Isolate re-renders to the smallest possible component

### Component Performance

- Create smaller components that consume only the specific hooks they need
- Break UI into logical, focused components to isolate re-renders

### State Management

- Use Jotai for state management when state needs to be shared across components
- Create atoms in controllers or dedicated state files
- Use `useAtomValue` for read-only access and `useSetAtom` for write-only access
- Avoid using `useAtom` when you only need to read or write, not both
- Expose atoms through controller methods for component consumption

## Clean Architecture

### Layer Organization

- **Presentation Layer**: Components, Pages, Controllers
- **Application Layer**: Services, Use Cases
- **Domain Layer**: Entities, Repository Interfaces, DTOs
- **Infrastructure Layer**: Repository Implementations, API Clients, Storage

### Domain Layer Organization

- Organize domain files by responsibility:
  - `*entity.ts` - Core business entities
  - `*model.ts` - Data transfer objects (DTOs)
  - `*repository.ts` - Repository interfaces
  - `*schema.ts` - Validation schemas

### Project Structure

```txt
apps/
  web/                      # Frontend application
    ├── app/
    │   ├── features/       # Feature modules
    │   ├── routes/         # Route definitions
    │   ├── components/     # Shared UI components
    │   ├── controllers/    # Shared controllers
    │   ├── domain/         # Shared domain entity, models
    │   ├── lib/            # Infrastructure layer
    │   └── services/       # Shared services
  backend/                  # Elysia backend
    ├── src/
    │   ├── features/       # Feature modules
    │   ├── routes/         # App-level route definitions
    │   ├── domain/         # Shared domain models
    │   ├── lib/            # Shared infrastructure
    │   └── services/       # Shared services
```

## Controller Pattern (React)

- Use class-based controllers with arrow function methods
- Use Jotai atoms for state management
- Provide granular hooks for accessing state and actions

## TanStack Route Loader Pattern

- Use route loaders to fetch data during navigation
- Delegate data fetching logic to controllers
- Access loader data with `Route.useLoaderData()`

## TanStack Route Structure

- Place route files in the shared `app/routes/` directory following TanStack's file-based routing convention
- Use dot notation for nested routes: `feature.subpage.tsx`, not nested directories
- Name index routes as `feature.index.tsx`
- Import feature components, controllers, and services from their feature directories
- Keep all feature-specific code in feature directories despite routes being in the shared routes folder
- Route files should contain minimal logic, delegating to controllers for data handling and components for UI

## Elysia Backend Guidelines

### Feature Organization

- Organize code by feature modules with clear boundaries
- Each feature contains: routes, service, domain models, and repository implementation
- Use underscore prefix for all feature-specific internal directories

### Controller Pattern (Elysia)

- Use Elysia instances as controllers with method chaining
- Group related routes using prefixes
- Include Swagger documentation with the `detail` property

### Service Pattern

- Use class-based services with arrow function methods
- Keep business logic in services, separate from controllers

### Repository Pattern

- Define repository interfaces in the domain layer
- Implement repositories in feature's `_lib` directory

### Model Definition

- Use Elysia's validation system (`t.Object()`) for models/DTOs
- Group related models together in `_domain` directory

## Security

- Validate all inputs using Elysia's built-in validation
- Implement proper authentication with better-auth
- Use secure headers and proper CORS configuration
