---
description: 
globs: 
alwaysApply: true
---
# Data Fetching & Async Management

## TanStack Query Pattern

- Use TanStack Query for all data fetching and async state management
- Organize query and mutation definitions based on scope:
  - Feature-specific queries go in `features/feature/_lib/feature-queries.ts`
  - Shared queries go in `libs/tanstack-query/shared-queries.ts`
- Structure all query keys with const objects for type safety and organization:
  ```ts
  export const featureKeys = {
    entity: ["entity"] as const,
    list: ["entity", "list"] as const,
    detail: (id: string) => ["entity", "detail", id] as const,
  };
  ```
- Create typed query options as functions that return queryOptions for parameterization:
  ```ts
  // For queries without parameters
  export const entityListQueryOptions = () => queryOptions({
    queryKey: featureKeys.list,
    queryFn: ({ signal }) => repository.getEntities({ signal }),
  });
  
  // For parameterized queries
  export const entityDetailQueryOptions = ({ id }: { id: string }) => queryOptions({
    queryKey: featureKeys.detail(id),
    queryFn: ({ signal }) => repository.getEntityById({ id, signal }),
  });
  ```
- In route loaders, use `ensureQueryData` to prefetch and cache queries:
  ```ts
  export const Route = createFileRoute('/entity/$id')({
    loader: async ({ params: { id }, context }) => {
      const data = await context.queryClient.ensureQueryData(
        entityDetailQueryOptions({ id }),
      );
      return { title: data.title };
    },
  });
  ```
- In components, use the appropriate query hook based on your needs:
  ```tsx
  // For regular queries with loading states
  const { data, isPending, error } = useQuery(entityListQueryOptions());
  
  // For components with Suspense
  const { data } = useSuspenseQuery(entityDetailQueryOptions({ id }));
  ```
- Define properly typed mutation options for all state mutations:
  ```ts
  export const createEntityMutationOptions = ({ 
    onSuccess 
  }: { 
    onSuccess?: () => void 
  } = {}) => ({
    mutationKey: [...featureKeys.entity, "create"],
    mutationFn: ({ input }: { input: InputType }) => 
      repository.createEntity({ input }),
    onSuccess,
  });
  ```
- Use object parameters for all data operation functions
- All query and mutation functions MUST return objects, never primitive values
- Create repository interfaces in the domain layer and implementations in the infrastructure layer:
  - Example: `entity-repository.ts` (interface) and `entity-tanstack-query-repo.ts` (implementation)
- Implement error handling in query functions, using notFound() for 404s:
  ```tsx
  queryFn: async ({ signal }) => {
    try {
      return await repository.getEntityById({ id, signal });
    } catch (error) {
      if (error.status === 404) {
        throw notFound();
      }
      throw error;
    }
  }
  ```
- Implement optimistic updates for mutations when appropriate
- Use TanStack Query's invalidation to manage cache consistency

## Authentication Implementation Example

The authentication implementation demonstrates this pattern:

- Query keys defined as `authKeys = { user: ["user"], session: ["session"] }`
- Mutation options typed for specific credential types
- Repository pattern with `auth-repository.ts` and `auth-tanstack-query-repo.ts`
- Session fetching via `queryClient.fetchQuery` in root route's `beforeLoad`
- Context passing for consistent data access across the application

## Reference Files

- Query definitions: [auth-queries.ts](mdc:apps/web/src/libs/tanstack-query/auth-queries.ts)
- Query client setup: [query-client.ts](mdc:apps/web/src/libs/tanstack-query/query-client.ts)
- Authentication repository: [auth-client-repo.ts](mdc:src/libs/better-auth/auth-client-repo.ts)
